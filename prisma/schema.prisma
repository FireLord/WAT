generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  name                String
  email               String    @unique
  verified            Boolean   @default(false)
  password            String
  ph_number           String?
  subscription_expiry DateTime?

  account        Template[]
  contact        Contact[]
  sent_messages  SentMessage[]
  otp            Otp[]
  transactions   Transaction[]
  revenue_cat_id RevenueCatId[]
}

model Transaction {
  id                          String   @id @default(cuid())
  user_id                     String
  event_timestamp             BigInt?
  product_id                  String?
  period_type                 String?
  purchased_at                BigInt?
  expiration_at               BigInt?
  environment                 String?
  presented_offering_id       String?
  transaction_id              String?
  original_transaction_id     String?
  country_code                String?
  app_user_id                 String?
  original_app_user_id        String?
  is_trial_conversion         Boolean?
  currency                    String?
  price                       Float?
  price_in_purchased_currency Float?
  type                        String?
  store                       String?
  takehome_percentage         Float?
  tax_percentage              Float?
  commission_percentage       Float?
  renewal_number              Int?
  offer_code                  String?
  status                      String?

  user User @relation(fields: [user_id], references: [id], onDelete: NoAction)
}

// const event =[event_timestamp, product_id, period_type, purchased_at, expiration_at, environment, presented_offering_id, transaction_id, original_transaction_id, country_code, app_user_id, original_app_user_id, is_trial_conversion, currency, price, price_in_purchased_currency, type, store, takehome_percentage, tax_percentage, commission_percentage, renewal_number, offer_code]

model Otp {
  id         String   @id @default(cuid())
  user_id    String   @unique
  otp        Int
  updated_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Template {
  id               String        @id @default(cuid())
  user_id          String
  title            String
  preset_msg       String
  preset_msg_2     String?
  welcome_msg_only Boolean
  rule_type        String
  regex_value      String?
  toggle           Boolean
  delay_second     String?
  tags             String[]
  user             User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  sent_messages    SentMessage[]
}

model SentMessage {
  id          String   @id @default(cuid())
  user_id     String
  firt_msg    Boolean
  msg_body    String
  template_id String
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  master      Template @relation(fields: [template_id], references: [id], onDelete: Cascade)
}

model Contact {
  id              String   @id @default(cuid())
  user_id         String
  original_number String
  contact_name    String
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now())
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model BugReports {
  id          String @id @default(cuid())
  email       String
  title       String
  description String
}

model RevenueCatId {
  id      String @id @default(cuid())
  user_id String @unique
  rc_id   String @unique
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
